
[2015/8/13] メモリリソース管理
	原則、ユーザーが作ったものはユーザーが後始末する。
	「作る」というのは、new または Create で始まる関数のこと。
	→なので、Create が RefPtr を返すのは無し。

[]Ubuntu
	sudo apt-get install libgl-dev

git clone https://github.com/lriki/Lumino.git
cd Lumino
git submodule init
git submodule update --init


[2015/7/31] トップレベルインターフェイス
- 継承による拡張
- 言語バインダを実装する上での使いやすさ
- Variant への保持しやすさ

・Font font = Font::CreateBitmapFont();
	

・FontPtr font = Font::CreateBitmapFont();

- スタックへの生成を許可するか？
	完全に禁止することは出来ない。派生させればなんとでも出来てしまう。
	

・Siv3D、セガGameLib
	公開するのはスマートポインタクラス。実体は可能な限り見せない。
	→ 派生させて拡張できない。GUI のユーザーコントロールとか作れないことになる。
	ただ、Siv3D の GUI は static Create() が shared_ptr 返していた。



■ サブモジュールの削除
$ git submodule deinit path/to/submodule
$ git rm path/to/submodule


■git ブランチ設計
[2015/4/20]
	・そもそもモジュールを分けるべきなのか。Lumino を使うユーザーには、
	  external 内の各モジュールへの include パスを通してもらう必要が出てくる。
	  → #include LN_MODULE_INCLDE_CORE("Lumino/Base/ByteBuffer.h")
	     みたいにマクロで囲って、ルートの includeファイル (LuminoAudio.h) では
	     #define LN_MODULE_INCLDE_CORE(path) "../../external/Lumino.Core/include"#path
	     のように置き換えてしまう。

・sub module ベースで行う。sub tree は使わない。
	sub tree を使うと、依存している階層構造が丸ごとコピーされる。
	直近では Math、Animation、Graphics を外部ライブラリ化する予定だが、
	sub tree 使うと Math のパッケージが丸ごと 3 つできることになる。
	clone の速度も遅くなるし、同一ソースが複数の箇所にコピーされるので混乱の原因になる。
	
・sub module の init/update は "再帰無し" で行うこと。
	再帰無しで更新すると、孫モジュールは clone されなくなる。
	例えば Graphics は単体でビルドする時と Lumino の子としてビルドする時で
	include パスと lib パスを変えておけば無駄を省ける。

■sub module? sub tree?
・sub module は参照。sub tree は実体。







■環境依存の問題
・VirtualBox では [3D アクセラレーションを有効化] を ON にしておかないと、ウィンドウ作成が失敗する。



■sub module 追加メモ
・TortoiseGit > add submodule
・Repository: git@github.com:lriki/Lumino.Core.git
  Path: external/Lumino.Core
・初回はコミット→Pushすること
・チェックアウト
	sub module のフォルダで Git bash で git checkout master
・コミット
	sub module のフォルダで コミット
・プッシュ
	sub module のフォルダで プッシュ。
	プッシュのダイアログで [ローカル][リモート] にブランチが出ていること。


コマンドライン手順
git clone git@github.com:lriki/Lumino.Graphics.git
git clone https://github.com/lriki/Lumino.Graphics.git
cd Lumino.Graphics
git submodule init
git submodule update --init

キーチェック
ssh -p 22 -T git@github.com




■インターフェイスの設計方針
	・Texture::Create 等、生成系に Manager のポインタを渡すべき？Manager グローバルインスタンスにするべき？
	→	この層 (Graphics、Audio、Input) はエンジンやフレームワークというよりも"ライブラリ"という位置づけ。
		多少使い勝手が悪くても、汎用的に使えてナンボ。
		Physics は「見た目用」と「衝突判定用」の2種類を作る可能性が高い。Manager が2つできると言うこと。
		グローバルにするとこれが難しくなる。


Graphics やりたいこと


iOSOpenGL ES プログラミングガイド
> 並列処理とOpenGL ES
https://developer.apple.com/jp/documentation/OpenGLES_ProgrammingGuide.pdf
計算の一部を内部でマルチスレッド化するオプションはあるけど、
最終的なスワップ時には結局同期を行う。
また、アプリ側でマルチスレッド対応して本当に効果あるのかは実際に動かしてテストすること、とある。

描画をマルチスレッド化したからと言って、必ずパフォーマンスが良くなるとは限らない。
シングルコアではオーバーヘッドが増加する。
→ やっぱり切り替えできるようにしたい。

MTフレームワーク
http://game.watch.impress.co.jp/docs/20070131/3dlp.htm


・フォント
・ブラシ
	BitmapBrush
	GradientBrush
	SolidColorBrush
	TileBrush
・ペン 太さ、色、点線
・DrawingContext
	DrawEllipse		楕円
	DrawGeometry
	DrawImage		ビットマップ
	DrawLine		線分
	DrawRectangle	矩形
	DrawRoundedRectangle	角丸矩形
	DrawText				文字列
	DrawVideo				ビデオ
	(PushEffect)
	(PushOpacity)
	(PushOpacityMask)
	(PushTransform)

・Geometry	https://msdn.microsoft.com/ja-jp/library/system.windows.media.geometry(v=vs.110).aspx#inheritanceContinued
	Figure の入れ物。何を入れるかは派生に任せる。Figure の境界ボックスを作ったり、衝突判定がメイン。
	派生:PathGeometry	https://msdn.microsoft.com/ja-jp/library/system.windows.media.pathgeometry(v=vs.110).aspx
		PathFigure の入れ物。複数の PathFigure を入れられる。	https://msdn.microsoft.com/ja-jp/library/system.windows.media.pathfigure(v=vs.110).aspx
	
	参考：
	https://msdn.microsoft.com/ja-jp/library/ms747393%28v=vs.110%29.aspx
	

cairo は・・・
描画はプラットフォームごとのAPIに任せていた。
矩形塗りつぶしなら Win では FillRect。ラスタライズは自前ではやっていない。



サンプラステートはテクスチャに持たせる。opengl、Unity と同じ表現。


Device
	Driver層
		このレベルは基本的に状態を持ったりしない。ドライバ的な。
		Driver::Texture
		Driver::VertexBuffer

	2層
		Driver層 をラップする。
		このレベルでマルチスレッド対応に必要な中間バッファを用意したりする。
		2::Texture
		2::VertexBuffer
		2::GraphicsDevice
		2::CommandRunner		一番最後でスワップチェインをPresent
		→ Interface と一緒でいいと思う。動的にモード切替したとき、
			BitBlt した結果を維持するとかのため、別のインスタンスに Driver インスタンスを
			移し変える作業とかが必要になる。

Interface層
	ユーザーに公開する最低レベル層。Device をラップする。
	

DrawingContext
	ペンとかブラシとかを駆使しつつベクタグラフィックを表現。
	トップレベルの描画ユーティリティ。
	SpriteReder や RingRenderer もこのレベル。

考えること（制限？）
	texture->Blt()	←これがあとから Blt したもので消えてしまう
	renderer->DrawTexture(texture)
	texture->Blt()
	renderer->DrawTexture(texture)
	...
	renderer->Present()

	BeginScene EndScene の中で Blt してはダメみたいな制限を設ける必要がありそう。


http://wlog.flatlib.jp/?blogid=1&query=normalmap



複数ウィンドウへの描画でマルチスレッドモードを使うときは
Canvas が描画コマンドリストを実行するようなイメージになる気がするが…

大前提として、Driver を呼び出せるのは描画スレッドだけである。(Create 系は別として)
それに対して、Canvas::Present が「このコマンドリスト実行して」と投げるのが自然かも。



■Effekseer 等の外部グラフィックスライブラリとの連携
・マルチスレッドモードではメインスレッドから 描画系APIを呼ぶことはできない。
  描画スレッドからのコールバックが必要。





