
#pragma once
#include "Foundation/Application.h"
#include "EngineSettings.h"

LN_NAMESPACE_BEGIN

/**
	@brief		アプリケーション全体にかかわる処理を行います。
*/
class Engine
{
public:

	/**
		@brief		エンジンの初期化処理を行います。
		@params[in]	settings	: 初期化設定
	*/
	static void Initialize(const EngineSettings& settings);
	
	/**
		@brief		エンジンの終了処理を行います。
	*/
	static void Finalize();

	/**
		@brief		1フレーム分の更新処理を行います。
		@return		アプリケーションの終了が要求されている場合は false を返します。
		@details	この関数はグラフィックスと入力を更新し、指定されたフレームレートになるように待機します。
	*/
	static bool UpdateFrame();

	static Application* GetApplication();
	static bool BeginRendering();
	static void EndRendering();
	static void Render();
	static void Exit();

	
	/**
		@brief		遅延をリセットします。
		@details	リソースのロード等で時間がかかり長い時間更新処理が行われなかった場合、
					UpdateFrame() は本来あるべき時間に追いつこうとしてしばらくの間ノーウェイトでフレーム更新が行われます。
					その間はアプリケーションが非常に高速に動作しているように見えてしまします。
					これを回避するため、時間のかかる処理の直後でこの関数を呼ぶことで、FPS 制御に遅延が発生していないことを伝えます。
	*/
	static void ResetFrameDelay();
};

LN_NAMESPACE_END
