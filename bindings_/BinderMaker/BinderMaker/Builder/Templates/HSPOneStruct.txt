//-----------------------------------------------------------------------------
// [TYPE]
//-----------------------------------------------------------------------------
#define GetPtr_[TYPE](pval) (([TYPE]*)pval)

static int g_[TYPE]_typeid = 0;

int hsp[TYPE]_typeid()
{
	return g_[TYPE]_typeid;
}

static int hsp[TYPE]_GetVarSize(PVal *pval)
{
	int size;
	size = pval->len[1];
	if (pval->len[2]) size *= pval->len[2];
	if (pval->len[3]) size *= pval->len[3];
	if (pval->len[4]) size *= pval->len[4];
	size *= sizeof([TYPE]);
	return size;
}

static void hsp[TYPE]_Alloc(PVal *pval, const PVal *pval2)
{
	if (pval->len[1] < 1) pval->len[1] = 1;
	int size = hsp[TYPE]_GetVarSize(pval);
	pval->mode = HSPVAR_MODE_MALLOC;
	char* pt = sbAlloc(size);
	[TYPE]* fv = ([TYPE] *)pt;
	memset(fv, 0, size);
	if (pval2 != NULL) {
		memcpy(pt, pval->pt, pval->size);
		sbFree(pval->pt);
	}
	pval->pt = pt;
	pval->size = size;
}

static void hsp[TYPE]_Free(PVal* pval)
{
	if (pval->mode == HSPVAR_MODE_MALLOC) { sbFree(pval->pt); }
	pval->pt = NULL;
	pval->mode = HSPVAR_MODE_NONE;
}

static PDAT* hsp[TYPE]_GetPtr(PVal* pval)
{
	return (PDAT*)((([TYPE]*)(pval->pt)) + pval->offset);
}

static int hsp[TYPE]_GetSize(const PDAT *pdatl)
{
	return sizeof([TYPE]);
}

static void hsp[TYPE]_Set(PVal* pval, PDAT* pdat, const void* in)
{
	*GetPtr_[TYPE](pdat) = *(([TYPE]*)(in));
}

static void hsp[TYPE]_Init(HspVarProc* p)
{
	p->Alloc = hsp[TYPE]_Alloc;
	p->Free = hsp[TYPE]_Free;
	
	p->GetPtr = hsp[TYPE]_GetPtr;
	p->GetSize = hsp[TYPE]_GetSize;
	p->GetBlockSize = hspCommon_GetBlockSize;
	p->AllocBlock = hspCommon_AllocBlock;

	p->Set = hsp[TYPE]_Set;

	p->vartype_name = "[TYPE]";
	p->version = 0x001;
	p->support = HSPVAR_SUPPORT_STORAGE | HSPVAR_SUPPORT_FLEXARRAY;
	p->basesize = sizeof([TYPE]);
	g_[TYPE]_typeid = p->flag;
}

