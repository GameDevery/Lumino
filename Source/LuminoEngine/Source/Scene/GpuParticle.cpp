/*
	初期値はCPUで設定する。

	計算用テクスチャで扱う必要がある情報
		位置(vec)	速度(vec)	加速度(vec)
		回転軸(vec)	速度(vec)	加速度(vec)
		角度(float)	速度(float)	加速度(float) → (vec) (Axis 軸周りの回転・この回転は計算された位置に対して乗算するイメージ)
		サイズ(float) 速度(float) 加速度(float) → (vec)

		回転の中心座標(vec)	・・・Dynamic の時に使う。

		スプライトローカルの回転軸(vec)	速度(vec)	加速度(vec)
		スプライトローカルの角度(float)	速度(float)	加速度(float)
		・・・加速度はいらないかな・・・。

		開始時間(float)
		終了時間(float)
		フェードイン時間(float)
		フェードアウト時間(float)


		位置とかは若干の無駄を容認すると、
		float4 が 13 個必要。13px。
		とりあえずパーティクル1つあたり 16px 必要なことにする。

		512x512 だと、16384 個が最大。
		1024x1024 だと、65536 個が最大。

		・・・ちょっと少ないなぁ。

		レンダリングに絶対必要な情報は
		- 位置(vec)
		- 向き(vec)
		- 大きさ(float)
		- 色(vec) or 透明度(float)

		頂点色を使わなければ 2px まで落とせて、
		1024x1024 だと、524288 個が最大。

		頂点色を使うと、位置のw を大きさとかにして 3px 
		1024x1024 だと、349184 個が最大。
		
		4px にすると
		1024x1024 だと、262144 個が最大。

		ここのpx数を減らすと、計算時に必要なテクスチャの数を増やさなければならない。

		※回転は z-が正面。

	Uniform でいいかも
		重力(グローバルな加速度)
		GravityPower;		// 中心 (ローカル座標の 0, 0, 0) への引力の強さ (負の値で斥力になる)

	ループ再生はどうする？
		スプライトごと。開始時間と終了時間の間のローカル時間を作る。

	残像はどうする？
		残像というよりトレイル。
		頂点バッファでストライプを作ってパーティクルテクスチャを引き延ばす。
		頂点バッファにはトレイル用の頂点を作っておいて、何フレーム後ろのかを初期値で与える。

		もしトレイルを実装する場合、初期値以外で計算に関係するパラメータを途中で変えてはならない。
		たとえばグローバルな加速度 (重力とか) の方向を変えてはならない。もちろんパーティクル個々の速度なども。

		Dynamic と同時使用するなら、worldMatrixも。初期姿勢(今は位置だけ)として与える。

		UE4 では Ribbon Type。
		トレイル関係のパラメータは、
		- 何m動いたら1個のリボン パーティクルを発生させるか
		- リボンパーティクルの個数


	Dynamicなのはどうする？
		計算用テクスチャを共有しなければ可。
		生成タイミングをCPU側で制御し、生成するとき、初期位置をテクスチャに書き込む。


	描画はインデックスバッファ無しの、トライアングルリストとする。
	頂点バッファにはパーティクルのインデックスしか格納しないので、インデックスバッファを使うと返って使用メモリが増える。
	また、初版では縮退三角形は使用しない。実装が複雑になるため。後々余裕が出てきたらやるかもしれないが・・・。

	http://www.matchlock.co.jp/online_help/bishamon_v1_8/
*/
#include "Internal.h"
#include <Lumino/Scene/GpuParticle.h>

#if 0
LN_NAMESPACE_BEGIN
LN_NAMESPACE_SCENE_BEGIN

//==============================================================================
// GpuParticle
//==============================================================================

//------------------------------------------------------------------------------
GpuParticle::GpuParticle()
{
}

//------------------------------------------------------------------------------
GpuParticle::~GpuParticle()
{
}

//------------------------------------------------------------------------------
void GpuParticle::initialize(SceneGraphManager* manager)
{
}

LN_NAMESPACE_SCENE_END
LN_NAMESPACE_END
#endif
