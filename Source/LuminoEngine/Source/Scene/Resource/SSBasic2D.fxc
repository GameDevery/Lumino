#ifdef LN_FXC_METADATA

{"vertexShaders":["vsBasic"],"pixelShaders":["psBasic"],"techniques":[{"name":"MainDraw","passes":[{"name":"P0","vertexShader":"vsBasic","pixelShader":"psBasic"}]}],"parameters":[{"name":"gWorldMatrix","semantic":"WORLD"},{"name":"g2DProjMatrix","semantic":"VIEWPROJECTION"},{"name":"gViewportSize","semantic":"VIEWPORTPIXELSIZE"},{"name":"gOpacity","semantic":"OPACITY"},{"name":"gColorScale","semantic":"COLORSCALE"},{"name":"gBlendColor","semantic":"BLENDCOLOR"},{"name":"gTone","semantic":"TONE"},{"name":"gMaterialTexture","semantic":"MATERIALTEXTURE","samplerStatus":{"MAGFILTER":"NONE","MINFILTER":"NONE"}}]}
#endif
#ifdef LN_GLSL_VERTEX_vsBasic
#version 120

#line 28
struct VS_OUTPUT {
    vec4 Pos;
    vec2 TexUV;
    vec4 Color;
};
#line 8
uniform mat4 gWorldMatrix;
uniform mat4 g2DProjMatrix;
uniform vec2 gViewportSize;
#line 12
vec2 gViewportOffset = (vec2( 0.5, 0.5) / gViewportSize);
uniform float gOpacity;
uniform vec4 gColorScale;
#line 16
uniform vec4 gBlendColor;
uniform vec4 gTone;
vec4 gColor = vec4( gColorScale.xyz, (gColorScale.w * gOpacity));
#line 20
uniform sampler2D gMaterialTexture;
#line 41
#line 60
#line 41
VS_OUTPUT vsBasic( in vec3 inPos, in vec4 inColor, in vec2 inUV ) {
    VS_OUTPUT o;
    #line 45
    o.Pos = (vec4( inPos, 1.0) * gWorldMatrix);
    o.Pos = (o.Pos * g2DProjMatrix);
    #line 50
    o.TexUV = (inUV + gViewportOffset);
    o.Color = inColor;
    return o;
}
attribute vec3 ln_Vertex;
attribute vec4 ln_Color0;
attribute vec2 ln_MultiTexCoord0;
varying vec2 xlv_TEXCOORD0;
varying vec4 xlv_COLOR0;
void main() {
    VS_OUTPUT xl_retval;
    xl_retval = vsBasic( vec3(ln_Vertex), vec4(ln_Color0), vec2(ln_MultiTexCoord0));
    gl_Position = vec4(xl_retval.Pos);
    xlv_TEXCOORD0 = vec2(xl_retval.TexUV);
    xlv_COLOR0 = vec4(xl_retval.Color);
}

#endif
#ifdef LN_GLSL_FRAGMENT_psBasic
#version 120

#line 28
struct VS_OUTPUT {
    vec4 Pos;
    vec2 TexUV;
    vec4 Color;
};
#line 8
uniform mat4 gWorldMatrix;
uniform mat4 g2DProjMatrix;
uniform vec2 gViewportSize;
#line 12
vec2 gViewportOffset = (vec2( 0.5, 0.5) / gViewportSize);
uniform float gOpacity;
uniform vec4 gColorScale;
#line 16
uniform vec4 gBlendColor;
uniform vec4 gTone;
vec4 gColor = vec4( gColorScale.xyz, (gColorScale.w * gOpacity));
#line 20
uniform sampler2D gMaterialTexture;
#line 41
#line 60
#line 60
vec4 psBasic( in vec2 in_uv_, in vec4 inColor ) {
    vec4 out_color = ((texture2D( gMaterialTexture, in_uv_) * gColor) * inColor);
    #line 66
    out_color.xyz = mix( out_color.xyz, gBlendColor.xyz, vec3( gBlendColor.w));
    float y = ((((0.208012 * out_color.x) + (0.586611 * out_color.y)) + (0.114478 * out_color.z)) * gTone.w);
    #line 70
    out_color.xyz = (((out_color.xyz * (1.0 - gTone.w)) + y) + gTone.xyz);
    return out_color;
}
varying vec2 xlv_TEXCOORD0;
varying vec4 xlv_COLOR0;
void main() {
    vec4 xl_retval;
    xl_retval = psBasic( vec2(xlv_TEXCOORD0), vec4(xlv_COLOR0));
    gl_FragData[0] = vec4(xl_retval);
}

#endif
#ifdef LN_HLSL_DX9
#line 1 "D://Proj//Volkoff//External//Lumino//src//Scene//Resource//SSBasic2D.tmp"


#line 8
float4x4 gWorldMatrix : WORLD ; 
float4x4 g2DProjMatrix : VIEWPROJECTION ; 

float2 gViewportSize : VIEWPORTPIXELSIZE ; 
static float2 gViewportOffset = ( float2 ( 0.5 , 0.5 ) / gViewportSize ) ; 

float gOpacity : OPACITY ; 
float4 gColorScale : COLORSCALE ; 
float4 gBlendColor : BLENDCOLOR ; 
float4 gTone : TONE ; 
static float4 gColor = float4 ( gColorScale . xyz , gColorScale . a * gOpacity ) ; 

texture gMaterialTexture : MATERIALTEXTURE ; 
sampler2D gTexSampler = sampler_state 
{ 
    texture = < gMaterialTexture > ; 
    MINFILTER = NONE ; 
    MAGFILTER = NONE ; 
    MIPFILTER = LINEAR;
} ; 

struct VS_OUTPUT 
{ 
    float4 Pos : POSITION ; 
    float2 TexUV : TEXCOORD0 ; 
    float4 Color : COLOR0 ; 
} ; 

#line 38
VS_OUTPUT vsBasic ( 
float3 inPos : POSITION , 
float4 inColor : COLOR0 , 
float2 inUV : TEXCOORD0 ) 
{ 
    VS_OUTPUT o ; 
    
    o . Pos = mul ( float4 ( inPos , 1.0 ) , gWorldMatrix ) ; 
    o . Pos = mul ( o . Pos , g2DProjMatrix ) ; 
    
#line 50
    o . TexUV = inUV + gViewportOffset ; 
    o . Color = inColor ; 
    return o ; 
} 

#line 58
float4 psBasic ( 
float2 in_uv_ : TEXCOORD0 , 
float4 inColor : COLOR0 ) : COLOR0 
{ 
    float4 out_color = tex2D ( gTexSampler , in_uv_ ) * gColor * inColor ; 
    
#line 66
    out_color . rgb = lerp ( out_color . rgb , gBlendColor . rgb , gBlendColor . a ) ; 
    
#line 69
    float y = ( 0.208012 * out_color . r + 0.586611 * out_color . g + 0.114478 * out_color . b ) * gTone . w ; 
    out_color . rgb = ( out_color . rgb * ( 1.0 - gTone . w ) ) + y + gTone . rgb ; 
    
    return out_color ; 
} 

#line 78
technique MainDraw 
{ 
    pass P0 
    { 
        VertexShader = compile vs_2_0 vsBasic ( ) ; 
        PixelShader = compile ps_2_0 psBasic ( ) ; 
    } 
} 


#endif
